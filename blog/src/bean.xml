<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context-3.2.xsd
		http://www.springframework.org/schema/tx 
        http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop-3.2.xsd">
        
     	<!-- 定义上下文返回的消息的国际化 -->
	<bean id="messageSource"
		class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
		<property name="basename"
			value="classpath:config/messages_zh_CN"/>
	</bean>
        
	<!-- 配置可以供占位符值的文件的路径 -->
	<bean
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations" value="classpath:config/config.properties"></property>
	</bean>
	<!-- 配置数据源 -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="driverClass" value="${jdbc.driverClassName}">
		</property>
		<property name="jdbcUrl" value="${jdbc.url}"></property>
		<property name="user" value="${jdbc.username}"></property>
		<property name="password" value="${jdbc.password}"></property>
		<property name="maxPoolSize" value="${jdbc.maxPoolSize}"></property>
		<property name="minPoolSize" value="${jdbc.minPoolSize}"></property>
		<property name="initialPoolSize" value="${jdbc.initialPoolSize}"></property>
		<property name="checkoutTimeout" value="${jdbc.checkoutTimeout}"></property>
		<property name="acquireIncrement" value="${jdbc.acquireIncrement}"></property>
	</bean>
	
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!-- 自动扫描hibernate映射文件 -->
		<property name="packagesToScan" value="com.blog.model.*" />
		<!-- 手动配置hibernate映射文件 -->
		<property name="mappingLocations">  
		    <list>
		        <value>classpath:/com/blog/model/*.hbm.xml</value>
		    </list>
		</property>
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.hbm2dll.auto">update</prop>
				<prop key="hibernate.dialect">org.hibernate.dialect.MySQL5Dialect</prop>
				<prop key="hibernate.show_sql">true</prop>
				<prop key="hibernate.format_sql">false</prop>
				<prop key="hibernate.current_session_context_class">
					org.springframework.orm.hibernate4.SpringSessionContext
				</prop>
				<prop key="hibernate.search.lucene_version">LUCENE_36</prop>
				<prop key="hibernate.search.default.directory_provider">
					org.hibernate.search.store.impl.FSDirectoryProvider
				</prop>
				<prop key="hibernate.search.default.indexBase">./temp/index</prop>
				<prop key="hibernate.cache.provider_class">net.sf.ehcache.hibernate.EhCacheProvider</prop>
			</props>
		</property>
	</bean>

	<!-- Transaction Manager 事务管理器 -->
	<bean id="transactionManager"
		class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>

	<!-- 这里配置后就不用再使用bean标签配置bean了 -->
	<!-- <context:annotation-config /> -->
	<!-- 去哪个包扫描生成bean，并自动完成装配 -->
	<context:component-scan base-package="com.blog">
		<context:include-filter type="regex" expression=".dao.*"/>
		<context:include-filter type="regex" expression=".service.*"/>
		<context:include-filter type="regex" expression=".model.*"/>
		<context:include-filter type="regex" expression=".security.*"/>
	</context:component-scan>
	<!-- 
		<context:annotation-config> 是用于激活那些已经在spring容器里注册过的bean（无论是通过xml的方式还是通过
		package scanning的方式）上面的注解。
		<context:component-scan>除了具有<context:annotation-config>的功能之外，
		它还可以在指定的package下扫描以及注册javabean 。
	 -->
	 
</beans>